apiVersion: v1
kind: Service
metadata:
  name: redis-service
  labels:
    app: redis-service
spec:
  ports:
    - port: 6379
      protocol: TCP
      targetPort: 6379
  selector:
    app: redis

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:5.0.4-alpine
          ports:
            - containerPort: 6379

---
apiVersion: v1
kind: Service
metadata:
  name: adminer-service
  labels:
    app: adminer-service
spec:
  type: LoadBalancer
  ports:
    - port: 8080
      protocol: TCP
      nodePort: 30088
  selector:
    app: adminer

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: adminer-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: adminer
  template:
    metadata:
      labels:
        app: adminer
    spec:
      containers:
        - name: adminer
          image: adminer
          ports:
            - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: user-db-service
  labels:
    app: user-db-service
spec:
  type: NodePort
  ports:
    - port: 5432
      protocol: TCP
      targetPort: 5432
      nodePort: 30099
  selector:
    app: user-db

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: user-db
  template:
    metadata:
      labels:
        app: user-db
    spec:
      containers:
        - name: postgres
          image: postgres-local
          imagePullPolicy: Never
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_PASSWORD
              value: "password"
            - name: POSTGRES_DB
              value: "matcha"
            - name: POSTGRES_USER
              value: "admin"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/db-data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql-api-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: graphql-api
  template:
    metadata:
      labels:
        app: graphql-api
    spec:
      initContainers:
        - name: pg-isready
          image: postgres
          command:
            [
              "sh",
              "-c",
              "until pg_isready -h user-db-service -p 5432; do echo waiting for database; sleep 2; done;",
            ]
        - name: init-redis
          image: busybox:latest
          command: ['sh', '-c', 'until nslookup redis-service; do echo waiting for redis; sleep 2; done;']
      containers:
        - name: graphql-api
          image: graphql-api
          resources:
            requests:
              cpu: "1"
          imagePullPolicy: Never
          ports:
            - containerPort: 4000
              name: graphql-port
            - containerPort: 4001
              name: express-port
          volumeMounts:
            - name: source-code
              mountPath: /usr/src/app
      volumes:
        - name: source-code
          hostPath:
            path: /Users/vfour/dev/matcha/server
            type: Directory

---
apiVersion: v1
kind: Service
metadata:
  name: graphql-api-service
  labels:
    app: graphql-api-service
spec:
  type: LoadBalancer
  ports:
    - port: 4000
      protocol: TCP
      nodePort: 30077
      name: graphql-port
    - port: 4001
      protocol: TCP
      nodePort: 30078
      name: express-port
  selector:
    app: graphql-api

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgres-pv
spec:
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  hostPath:
    path: /tmp/postgres

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: ""
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: react-app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: react-app-matcha
  template:
    metadata:
      labels:
        app: react-app-matcha
    spec:
      containers:
        - name: react-app-matcha
          image: react-app-matcha
          resources:
            requests:
              cpu: "1"
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
          volumeMounts:
            - name: source-code
              mountPath: /usr/src/app
          env:
            - name: CHOKIDAR_USEPOLLING
              value: "true"
      volumes:
        - name: source-code
          hostPath:
            path: /Users/vfour/dev/matcha/client
            type: Directory

---
apiVersion: v1
kind: Service
metadata:
  name: react-app-service
  labels:
    app: react-app-service
spec:
  type: LoadBalancer
  ports:
    - port: 3000
      protocol: TCP
      nodePort: 30080
  selector:
    app: react-app-matcha
