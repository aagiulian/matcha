# type Like {
#   id: ID!
#   friend: User!
#   datetime: String!
#   # back: Boolean!
# }

# type Blocked {
#   id: ID!
#   friend: User!
#   datetime: String!
#   # back: Boolean!
# }

# type Match {
#   id: ID!
#   friend: User!
#   datetime: String!
#   # back: Boolean!
# }

# type Visit {
#   id: ID!
#   friend: User!
#   datetime: String!
#   # back: Boolean!
# }

type Notification {
  id: ID!
  emitter: User!
  recipient: User!
  datetime: String!
  type: String!
}

#input inputNotification {
#  emitter: User!
#  recipient: User!
#  datetime: String!
#  type: String!
#}

type Query {
  getLatest(recvId: ID!): [Notification]
  getAll(recvId: ID!, limit: Int, latestnotificationId: ID): [Notification]
  getUnseenCount(recvId: ID!): Int
}

type Mutation {
  markAsSeen(notificationId: ID!): Notification
  like(userId: ID!): Boolean
  unLike(userId: ID!): Boolean
  block(userId: ID!): Boolean
  unBlock(userId: ID!): Boolean
  #save(notification: inputNotification!): Notification
}

type Subscription {
  newNotification: Notification!
  newUnseenCount: Int!
}
